name: update-packages

on:
  schedule:
    - cron: '0 3 * * *'
  workflow_dispatch:

jobs:
  update-packages:
    name: Update GitHub-sourced packages
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}

      - name: Set up Nix
        uses: cachix/install-nix-action@v25
        with:
          install_url: https://releases.nixos.org/nix/nix-2.18.1/install

      - name: Install jq
        run: nix profile install nixpkgs#jq

      - name: Update package versions
        run: |
          # Function to get latest GitHub release
          get_latest_release() {
            local owner="$1"
            local repo="$2"
            curl -s "https://api.github.com/repos/$owner/$repo/releases/latest" | jq -r '.tag_name // empty'
          }

          # Function to get latest commit for unstable packages
          get_latest_commit() {
            local owner="$1"
            local repo="$2"
            curl -s "https://api.github.com/repos/$owner/$repo/commits/HEAD" | jq -r '.sha // empty'
          }

          # Function to update package in packages.nix
          update_package() {
            local package_name="$1"
            local owner="$2"
            local repo="$3"
            local new_version="$4"
            local new_rev="$5"
            local is_unstable="$6"

            echo "Updating $package_name to version $new_version (rev: $new_rev)"

            # Get new hash
            if [ "$is_unstable" = "true" ]; then
              new_hash=$(nix-prefetch-url --unpack "https://github.com/$owner/$repo/archive/$new_rev.tar.gz")
            else
              new_hash=$(nix-prefetch-url --unpack "https://github.com/$owner/$repo/archive/$new_rev.tar.gz")
            fi

            if [ -n "$new_hash" ]; then
              # Convert to SRI format
              new_sha256="sha256-$(nix hash to-sri --type sha256 "$new_hash")"

              # Update version
              if [ "$is_unstable" = "true" ]; then
                # For unstable packages, update the date part
                today=$(date +%Y-%m-%d)
                sed -i "s/version = \"unstable-[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}\"/version = \"unstable-$today\"/" src/overlays/packages.nix
              else
                # For regular packages, update version
                sed -i "s/version = \"[^\"]*\";.*# $package_name$/version = \"$new_version\"; # $package_name/" src/overlays/packages.nix
              fi

              # Update rev
              sed -i "s/rev = \"[^\"]*\";.*# $package_name$/rev = \"$new_rev\"; # $package_name/" src/overlays/packages.nix

              # Update sha256
              sed -i "s/sha256 = \"[^\"]*\";.*# $package_name$/sha256 = \"$new_sha256\"; # $package_name/" src/overlays/packages.nix

              echo "✓ Updated $package_name successfully"
            else
              echo "✗ Failed to get hash for $package_name"
            fi
          }

          # Add comments to identify packages in packages.nix for easier updating
          # This is a one-time setup step
          if ! grep -q "# btop-gpu$" src/overlays/packages.nix; then
            sed -i 's/version = "1\.4\.4";$/version = "1.4.4"; # btop-gpu/' src/overlays/packages.nix
            sed -i 's/rev = "v\${version}";.*owner = "aristocratos".*repo = "btop"/rev = "v${version}"; # btop-gpu/' src/overlays/packages.nix
            sed -i 's/sha256 = "sha256-4H9UjewJ7UFQtTQYwvHZL3ecPiChpfT6LEZwbdBCIa0=";.*aristocratos.*btop/sha256 = "sha256-4H9UjewJ7UFQtTQYwvHZL3ecPiChpfT6LEZwbdBCIa0="; # btop-gpu/' src/overlays/packages.nix
          fi

          if ! grep -q "# rofi-nerdy$" src/overlays/packages.nix; then
            sed -i 's/version = "0\.0\.7";.*rofi-nerdy/version = "0.0.7"; # rofi-nerdy/' src/overlays/packages.nix
            sed -i 's/rev = "77d6b5fa757c6325f858051ddac302742201fe73";.*rofi-nerdy/rev = "77d6b5fa757c6325f858051ddac302742201fe73"; # rofi-nerdy/' src/overlays/packages.nix
            sed -i 's/sha256 = "sha256-CEv8xgV7fLzg2HlecmEzoaE3GW8M0FBehkApEhMPZHc=";.*rofi-nerdy/sha256 = "sha256-CEv8xgV7fLzg2HlecmEzoaE3GW8M0FBehkApEhMPZHc="; # rofi-nerdy/' src/overlays/packages.nix
          fi

          if ! grep -q "# workspace-diagnostics-nvim$" src/overlays/packages.nix; then
            sed -i 's/version = "unstable-2025-01-08";.*workspace-diagnostics/version = "unstable-2025-01-08"; # workspace-diagnostics-nvim/' src/overlays/packages.nix
            sed -i 's/rev = "60f9175b2501ae3f8b1aba9719c0df8827610c8e";.*workspace-diagnostics/rev = "60f9175b2501ae3f8b1aba9719c0df8827610c8e"; # workspace-diagnostics-nvim/' src/overlays/packages.nix
            sed -i 's/sha256 = "sha256-jSpKaKnGyip\/nzqU52ypWLgoCtvccYN\+qb5jzlwAnd4=";.*workspace-diagnostics/sha256 = "sha256-jSpKaKnGyip\/nzqU52ypWLgoCtvccYN+qb5jzlwAnd4="; # workspace-diagnostics-nvim/' src/overlays/packages.nix
          fi

          # Check for updates
          changed=false

          # Update btop-gpu
          echo "Checking btop-gpu..."
          latest_btop=$(get_latest_release "aristocratos" "btop")
          if [ -n "$latest_btop" ]; then
            current_btop=$(grep -o 'version = "[^"]*"; # btop-gpu' src/overlays/packages.nix | sed 's/version = "//; s/"; # btop-gpu//')
            if [ "$latest_btop" != "v$current_btop" ]; then
              clean_version=$(echo "$latest_btop" | sed 's/^v//')
              update_package "btop-gpu" "aristocratos" "btop" "$clean_version" "$latest_btop" "false"
              changed=true
            else
              echo "btop-gpu is up to date ($current_btop)"
            fi
          fi

          # Update rofi-nerdy
          echo "Checking rofi-nerdy..."
          latest_rofi=$(get_latest_commit "xavwe" "rofi-nerdy")
          if [ -n "$latest_rofi" ]; then
            current_rofi=$(grep -o 'rev = "[^"]*"; # rofi-nerdy' src/overlays/packages.nix | sed 's/rev = "//; s/"; # rofi-nerdy//')
            if [ "$latest_rofi" != "$current_rofi" ]; then
              # Get version from Cargo.toml
              version=$(curl -s "https://raw.githubusercontent.com/xavwe/rofi-nerdy/$latest_rofi/Cargo.toml" | grep '^version = ' | head -n1 | sed 's/version = "//; s/"//')
              update_package "rofi-nerdy" "xavwe" "rofi-nerdy" "$version" "$latest_rofi" "false"
              changed=true
            else
              echo "rofi-nerdy is up to date"
            fi
          fi

          # Update workspace-diagnostics-nvim
          echo "Checking workspace-diagnostics-nvim..."
          latest_workspace=$(get_latest_commit "artemave" "workspace-diagnostics.nvim")
          if [ -n "$latest_workspace" ]; then
            current_workspace=$(grep -o 'rev = "[^"]*"; # workspace-diagnostics-nvim' src/overlays/packages.nix | sed 's/rev = "//; s/"; # workspace-diagnostics-nvim//')
            if [ "$latest_workspace" != "$current_workspace" ]; then
              update_package "workspace-diagnostics-nvim" "artemave" "workspace-diagnostics.nvim" "unstable" "$latest_workspace" "true"
              changed=true
            else
              echo "workspace-diagnostics-nvim is up to date"
            fi
          fi

          # Set output for next step
          echo "changed=$changed" >> $GITHUB_OUTPUT
        id: update

      - name: Create Pull Request
        if: steps.update.outputs.changed == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          if ! git diff --quiet src/overlays/packages.nix; then
            # Create a new branch for the PR
            branch_name="update-packages-$(date +%Y%m%d-%H%M%S)"
            git checkout -b "$branch_name"
            
            git add src/overlays/packages.nix
            git commit -m "chore(packages): update GitHub-sourced package versions

            Automated update of package versions and hashes for GitHub-sourced packages."
            
            git push origin "$branch_name"
            
            # Create PR using GitHub CLI
            gh pr create \
              --title "chore(packages): update GitHub-sourced package versions" \
              --body "Automated update of package versions and hashes for GitHub-sourced packages.

            This PR was automatically created by the update-packages workflow." \
              --assignee "xavwe" \
              --base main \
              --head "$branch_name"
            
            echo "✓ Created PR with package updates"
          else
            echo "No changes to commit"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}