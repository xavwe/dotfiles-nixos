name: release
on:
  workflow_run:
    workflows: ["test"]
    types:
      - completed
    branches:
      - main
permissions:
  contents: write
  pull-requests: write
jobs:
  release:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Generate token
        id: generate-token
        uses: actions/create-github-app-token@8ab05a8a84060745bdc8f0b4f6d8f403c29e06b8
        with:
          app-id: ${{ secrets.CLAUDE_APP_ID }}
          private-key: ${{ secrets.CLAUDE_PRIVATE_KEY }}

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          token: ${{ steps.generate-token.outputs.token }}
          fetch-depth: 0

      - name: Install Nix
        uses: cachix/install-nix-action@v24

      - name: Install git-cliff
        run: |
          nix profile install nixpkgs#git-cliff

      - name: Check for new version
        id: version
        run: |
          # Get the current version from the latest tag
          CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo "0.0.0")

          # Use git-cliff to determine if we need a release and what version
          # Only consider feat and fix commits
          if git-cliff --bump --unreleased --include-path "feat*,fix*" > /dev/null 2>&1; then
            NEW_VERSION=$(git-cliff --bump --unreleased --include-path "feat*,fix*" | head -n1 | grep -o 'v[0-9]*\.[0-9]*\.[0-9]*' | sed 's/^v//')
            if [ "$NEW_VERSION" != "$CURRENT_VERSION" ]; then
              echo "should_release=true" >> $GITHUB_OUTPUT
              echo "new_version=v$NEW_VERSION" >> $GITHUB_OUTPUT
              echo "New version will be: v$NEW_VERSION"
            else
              echo "should_release=false" >> $GITHUB_OUTPUT
              echo "No version bump needed"
            fi
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "No feat or fix commits found"
          fi

      - name: Generate changelog
        id: generate-changelog
        if: steps.version.outputs.should_release == 'true'
        run: |
          CHANGELOG_FILE="RELEASE_NOTES.md"
          # Only include feat and fix commits in changelog
          git-cliff --latest --strip header --include-path "feat*,fix*" > "$CHANGELOG_FILE"
          echo "changelog=$CHANGELOG_FILE" >> $GITHUB_OUTPUT

      - name: Create release
        if: steps.version.outputs.should_release == 'true'
        run: |
          gh release create ${{ steps.version.outputs.new_version }} \
            --title "Release ${{ steps.version.outputs.new_version }}" \
            --notes-file ${{ steps.generate-changelog.outputs.changelog }}
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}